package org.vitrivr.engine.core.resolver.impl

import org.vitrivr.engine.core.model.metamodel.Schema
import org.vitrivr.engine.core.model.retrievable.RetrievableId
import org.vitrivr.engine.core.resolver.Resolvable
import org.vitrivr.engine.core.resolver.Resolver
import org.vitrivr.engine.core.resolver.ResolverFactory
import org.vitrivr.engine.core.source.file.MimeType
import java.io.InputStream
import java.io.OutputStream
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

/**
 * A [Resolver] resolves a physical file from disk.
 *
 * @author Fynn Faber
 * @version 1.0.0
 */
class DiskResolver : ResolverFactory {
    /**
     * Generates a new [DiskResolver] instance using the provided [parameters].
     *
     * @param parameters The parameters used to configure [Resolver]
     * @return [DiskResolver]
     */
    override fun newResolver(schema: Schema, parameters: Map<String, String>): Resolver {
        val location = Paths.get(parameters["location"] ?: "./thumbnails/${schema.name}")
        return Instance(location)
    }

    /**
     * The [Resolver] generated by this [DiskResolver].
     */
    private class Instance(private val location: Path) : Resolver {
        init {
            /* Make sure, directory exists. */
            if (!Files.exists(this.location)) {
                Files.createDirectories(this.location)
            }
        }

        /**
         * Resolves the provided [RetrievableId] to a [Resolvable] using this [Resolver].
         *
         * @param id The [RetrievableId] to resolve.
         * @param suffix The suffix of the filename.
         * @return [Resolvable] or null, if [RetrievableId] could not be resolved.
         */
        override fun resolve(id: RetrievableId, suffix: String): Resolvable = DiskResolvable(id, suffix)

        /**
         * A [Resolvable] generated by this [DiskResolver].
         */
        inner class DiskResolvable(override val retrievableId: RetrievableId, suffix: String) : Resolvable {
            val path: Path = this@Instance.location.resolve("${retrievableId}.$suffix")
            override val mimeType: MimeType by lazy {
                MimeType.getMimeType(this.path) ?: MimeType.UNKNOWN
            }
            override fun exists(): Boolean = Files.exists(this.path)
            override fun openInputStream(): InputStream = Files.newInputStream(this.path, StandardOpenOption.READ)
            override fun openOutputStream(): OutputStream = Files.newOutputStream(this.path, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE)
        }
    }
}
