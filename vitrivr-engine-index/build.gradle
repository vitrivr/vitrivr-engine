plugins {
    id 'org.jetbrains.kotlin.plugin.serialization' version "$version_kotlin"
    id 'maven-publish'
    id 'signing'
}



switch (org.gradle.internal.os.OperatingSystem.current()) {
    case org.gradle.internal.os.OperatingSystem.LINUX:
        project.ext.set("javacppPlatform", 'linux-x86_64')
        break
    case org.gradle.internal.os.OperatingSystem.WINDOWS:
        project.ext.set("javacppPlatform", 'windows-x86_64')
        break
    case org.gradle.internal.os.OperatingSystem.MAC_OS:
        project.ext.set("javacppPlatform", 'macosx-x86_64')
        break
}

dependencies {

    /* vitrivr core dependency. */
    api project(':vitrivr-engine-core')
    api project(':vitrivr-engine-module-m3d')

    /** Java CV (used for video decoding). */
    implementation group: 'org.bytedeco', name: 'javacv', version: version_javacv
    implementation group: 'org.bytedeco', name: 'ffmpeg', version: version_ffmpeg, classifier: project.ext.javacppPlatform

    /** Jaffree for external ffmpeg*/
    implementation group: 'com.github.kokorin.jaffree', name: 'jaffree', version: version_jaffree

    /** ScrImage (used for image resizing). */
    implementation group: 'com.sksamuel.scrimage', name: 'scrimage-core', version: version_scrimage

    /** TwelveMonkeys for image support */
    runtimeOnly group: 'com.twelvemonkeys.imageio', name: 'imageio-core', version: version_twelvemonkeys
    runtimeOnly group: 'com.twelvemonkeys.imageio', name: 'imageio-tiff', version: version_twelvemonkeys
    runtimeOnly group: 'com.twelvemonkeys.imageio', name: 'imageio-jpeg', version: version_twelvemonkeys
    runtimeOnly group: 'com.twelvemonkeys.imageio', name: 'imageio-psd', version: version_twelvemonkeys
    runtimeOnly group: 'com.twelvemonkeys.imageio', name: 'imageio-bmp', version: version_twelvemonkeys
    runtimeOnly group: 'com.twelvemonkeys.imageio', name: 'imageio-webp', version: version_twelvemonkeys
    runtimeOnly group: 'com.twelvemonkeys.imageio', name: 'imageio-pdf', version: version_twelvemonkeys

    /** NightMonkeys for advancaded image formats (HEIF & WEBP). */
    //implementation group: 'com.github.gotson.nightmonkeys', name: 'imageio-heif', version: version_nightmonkeys
}

/* Publication of vitrivr engine index to Maven Central. */
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'org.vitrivr'
            artifactId = 'vitrivr-engine-index'
            version = System.getenv().getOrDefault("MAVEN_PUBLICATION_VERSION", version.toString())
            from components.java
            pom {
                name = 'vitrivr Engine Core'
                description = 'Default indexing and extraction components of the vitrivr multimedia retrieval engine.'
                url = 'https://github.com/vitrivr/vitrivr-engine/'
                licenses {
                    license {
                        name = 'MIT License'
                    }
                }
                developers {
                    developer {
                        id = 'ppanopticon'
                        name = 'Ralph Gasser'
                        email = 'ralph.gasser@unibas.ch'
                    }
                    developer {
                        id = 'lucaro'
                        name = 'Luca Rossetto'
                        email = 'rossetto@ifi.uzh.ch'
                    }
                    developer {
                        id = 'net-cscience-raphael'
                        name = 'Raphael Waltens√ºl'
                        email = 'raphael.waltenspuel@unibas.ch'
                    }
                    developer {
                        id = 'rahelarnold98'
                        name = 'Rahel Arnold'
                        email = 'rahel.arnold@unibas.ch'
                    }
                    developer {
                        id = 'faberf'
                        name = 'Fynn Faber'
                        email = 'fynnfirouz.faber@unibas.ch'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/vitrivr/vitrivr-engine.git'
                    url = 'https://github.com/vitrivr/vitrivr-engine/'
                }
            }
        }
    }
    repositories {
        repositories {
            maven {
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                name = "OSSRH"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
        }
    }
}